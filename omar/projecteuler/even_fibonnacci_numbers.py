# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.
from typing import List


def even_fib_numbers(list_of_fib_numbers: List[int]) -> int:
    sum_of_equal_numbers = 0
    for number in list_of_fib_numbers:
        if number % 2 == 0:
            sum_of_equal_numbers += number
    return sum_of_equal_numbers


def generate_fib_numbers(limit: int):
    """
    Used as a utility function to get fib numbers up to 4000000
    Generates a list of Fibonacci numbers up to a given limit.

    :param limit: The upper limit for the Fibonacci sequence.
    :return: A list of Fibonacci numbers below the given limit.
    """
    fib_numbers = []
    a, b = 1, 2
    while a < limit:
        fib_numbers.append(a)
        a, b = b, a + b
    return fib_numbers
